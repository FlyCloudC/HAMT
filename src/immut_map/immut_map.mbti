package "FlyCloudC/hamt/immut_map"

import(
  "moonbitlang/core/quickcheck"
)

// Values
fn[K : Hash + Eq, V] from_array(Array[(K, V)]) -> T[K, V]

fn[K : Hash + Eq, V] from_iter(Iter[(K, V)]) -> T[K, V]

fn[K : Hash, V] new() -> T[K, V]

fn[K : Hash + Eq, V] of(Array[(K, V)]) -> T[K, V]

fn[K : Hash, V] singleton(K, V) -> T[K, V]

// Types and methods
type T[K, V]
fn[K : Eq + Hash, V] T::add(Self[K, V], K, V) -> Self[K, V]
fn[K : Eq + Hash, V] T::contains(Self[K, V], K) -> Bool
fn[K : Eq, V] T::difference(Self[K, V], Self[K, V]) -> Self[K, V]
fn[K, V] T::each(Self[K, V], (K, V) -> Unit) -> Unit
fn[K : Hash + Eq, V] T::from_array(Array[(K, V)]) -> Self[K, V]
fn[K : Hash + Eq, V] T::from_iter(Iter[(K, V)]) -> Self[K, V]
fn[K : Eq + Hash, V] T::get(Self[K, V], K) -> V?
fn[K : Eq, V] T::intersection_with(Self[K, V], Self[K, V], (K, V, V) -> V) -> Self[K, V]
fn[K, V] T::is_empty(Self[K, V]) -> Bool
fn[K, V] T::iter(Self[K, V]) -> Iter[(K, V)]
fn[K : Hash, V] T::new() -> Self[K, V]
fn[K : Hash + Eq, V] T::of(Array[(K, V)]) -> Self[K, V]
fn[K : Eq + Hash, V] T::remove(Self[K, V], K) -> Self[K, V]
fn[K : Hash, V] T::singleton(K, V) -> Self[K, V]
fn[K, V] T::size(Self[K, V]) -> Int
fn[K : Eq, V] T::union_with(Self[K, V], Self[K, V], (K, V, V) -> V) -> Self[K, V]
impl[K : Eq, V : Eq] Eq for T[K, V]
impl[K : @quickcheck.Arbitrary + Eq + Hash, V : @quickcheck.Arbitrary] @quickcheck.Arbitrary for T[K, V]

// Type aliases

// Traits

